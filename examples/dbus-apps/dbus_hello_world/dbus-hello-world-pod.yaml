apiVersion: v1
kind: Pod
metadata:
  name: dbus-controller-hello-world-pod
  labels:
    app: dbus-controller-hello-world
    environment: production
spec:
  restartPolicy: Always
  # Shared volume for D-Bus socket communication between containers
  volumes:
    - name: dbus-session-socket
      emptyDir: {}  # Regular disk-based emptyDir for better compatibility
  containers:
    # Container 1: D-Bus Session Daemon + D-Bus Controller Application
    - name: dbus-controller-service
      image: localhost/dbus-controller:latest  # Dockerfile.dbus-controller
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 1000
        runAsGroup: 1000
        capabilities:
          drop:
            - ALL
      command:
        - /bin/bash
        - -c
        - |
          echo "=== D-Bus Controller Service Container ==="
          echo "Starting isolated D-Bus session daemon and controller application"
          
          # Set up writable workspace for OpenAPI docs
          cd /tmp/docs
          mkdir -p doc
          
          # Create user home directory and D-Bus config
          mkdir -p /tmp/dbus-home/.config/dbus-1/session.d
          export HOME=/tmp/dbus-home
          
          # Create shared socket directory
          mkdir -p /shared/dbus
          chmod 755 /shared/dbus
          
          # Start isolated session bus with custom socket location
          export DBUS_SESSION_BUS_ADDRESS="unix:path=/shared/dbus/session_bus_socket"
          
          echo "Starting isolated D-Bus session daemon..."
          echo "Bus address: $DBUS_SESSION_BUS_ADDRESS"
          
          # Start D-Bus session daemon in background
          dbus-daemon --session \
            --address="$DBUS_SESSION_BUS_ADDRESS" \
            --nofork \
            --print-pid &
          
          DBUS_PID=$!
          echo "Isolated D-Bus session daemon started with PID: $DBUS_PID"
          
          # Wait for socket to be created
          for i in {1..30}; do
            if [ -S /shared/dbus/session_bus_socket ]; then
              echo "D-Bus socket created successfully"
              break
            fi
            echo "Waiting for D-Bus socket... ($i/30)"
            sleep 1
          done
          
          echo "Testing D-Bus connectivity..."
          dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames || echo "D-Bus test completed"
          
          echo "Starting D-Bus Controller API..."
          /usr/local/bin/dbus-controller &
          API_PID=$!
          
          # Wait for API to be ready
          echo "Waiting for API to start..."
          for i in {1..30}; do
            if curl -s -f http://localhost:8080/buses >/dev/null 2>&1; then
              echo "API is ready!"
              break
            fi
            echo "Waiting for API... ($i/30)"
            sleep 1
          done
          
          echo "Testing API endpoints..."
          echo "=== Available buses ==="
          curl -s http://localhost:8080/buses | jq '.' 2>/dev/null || curl -s http://localhost:8080/buses
          
          echo -e "\n=== Session bus services ==="
          curl -s http://localhost:8080/buses/session/services | jq '. | length' 2>/dev/null || curl -s http://localhost:8080/buses/session/services
          
          echo -e "\n=== API Documentation ==="
          echo "OpenAPI spec: http://localhost:8080/swagger/openapi.json"
          echo "Swagger UI: http://localhost:8080/swagger/index.html"

          echo -e "\n=== Fetching OpenAPI spec ==="
          curl -s http://localhost:8080/swagger/openapi.json | jq || echo "Failed to parse OpenAPI spec"

          echo -e "\n=== D-Bus Controller API is running ==="
          echo "Access the API at: http://localhost:8080"
          echo "Monitoring both D-Bus daemon and API..."
          
          # Monitor both processes
          while kill -0 $DBUS_PID 2>/dev/null && kill -0 $API_PID 2>/dev/null; do
            sleep 5
          done
          
          echo "One of the services stopped, exiting..."
      volumeMounts:
        - name: dbus-session-socket
          mountPath: /shared/dbus
      env:
        - name: DBUS_SESSION_BUS_ADDRESS
          value: "unix:path=/shared/dbus/session_bus_socket"
        - name: CGO_ENABLED
          value: "0"
        - name: GOOS
          value: "linux"
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "300m"

    # Container 2: D-Bus Hello World Application
    - name: dbus-hello-world-service
      image: dbus-hello-world:latest  # examples/dbus-apps/dbus_hello_world/Dockerfile
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 1000
        runAsGroup: 1000
        capabilities:
          drop:
            - ALL
      command:
        - /bin/bash
        - -c
        - |
          echo "=== D-Bus Hello World Service Container ==="
          echo "Waiting for shared D-Bus session..."
          
          # Wait for D-Bus session daemon from first container
          echo "Waiting for isolated D-Bus session..."
          while [ ! -S /shared/dbus/session_bus_socket ]; do
            echo "  Waiting for D-Bus socket..."
            sleep 2
          done
          
          export DBUS_SESSION_BUS_ADDRESS="unix:path=/shared/dbus/session_bus_socket"
          echo "Connected to shared session bus: $DBUS_SESSION_BUS_ADDRESS"
          
          echo "Testing D-Bus connectivity..."
          dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames || echo "D-Bus test completed"
          
          echo "Starting D-Bus Hello World service..."
          /usr/local/bin/dbus-hello-world

          echo "HelloWorld interface properties..."
          dbus-send --session --print-reply --dest=com.example.HelloWorld /com/example/HelloWorld org.freedesktop.DBus.Properties.GetAll string:"com.example.HelloWorld" || echo "Failed to get HelloWorld properties"

      volumeMounts:
        - name: dbus-session-socket
          mountPath: /shared/dbus
      env:
        - name: DBUS_SESSION_BUS_ADDRESS
          value: "unix:path=/shared/dbus/session_bus_socket"
        - name: HOME
          value: "/tmp/dbus-home"
      resources:
        requests:
          memory: "64Mi"
          cpu: "50m"
        limits:
          memory: "128Mi"
          cpu: "100m"