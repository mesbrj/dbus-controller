apiVersion: v1
kind: Pod
metadata:
  name: isolated-dbus-pod
  labels:
    app: isolated-dbus-controller
    environment: development
spec:  
  # Shared volume for D-Bus socket communication between containers
  volumes:
    - name: dbus-session-socket
      emptyDir:
        medium: Memory  # Use tmpfs for better performance and security
    - name: dbus-config
      configMap:
        name: dbus-session-config
        optional: true
  containers:
    # Isolated D-Bus Session Daemon - minimal, secure, pod-scoped
    - name: isolated-dbus-session
      image: localhost/isolated-dbus:latest  # Custom image with D-Bus pre-installed
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 1000
        runAsGroup: 1000
        capabilities:
          drop:
            - ALL
      command:
        - /bin/bash
        - -c
        - |
          echo "=== Isolated D-Bus Session Setup ==="
          echo "Using pre-installed D-Bus from Ubuntu image"
          
          # Create user home directory and D-Bus config
          mkdir -p /tmp/dbus-home/.config/dbus-1/session.d
          export HOME=/tmp/dbus-home
          
          # Create shared socket directory
          mkdir -p /shared/dbus
          chmod 755 /shared/dbus
          
          # Start isolated session bus with custom socket location
          export DBUS_SESSION_BUS_ADDRESS="unix:path=/shared/dbus/session_bus_socket"
          
          echo "Starting isolated D-Bus session daemon..."
          echo "Bus address: $DBUS_SESSION_BUS_ADDRESS"
          
          # Start D-Bus session daemon
          dbus-daemon --session \
            --address="$DBUS_SESSION_BUS_ADDRESS" \
            --nofork \
            --print-pid &
          
          DBUS_PID=$!
          echo "Isolated D-Bus session daemon started with PID: $DBUS_PID"
          
          # Wait for socket to be created
          for i in {1..30}; do
            if [ -S /shared/dbus/session_bus_socket ]; then
              echo "D-Bus socket created successfully"
              break
            fi
            echo "Waiting for D-Bus socket... ($i/30)"
            sleep 1
          done
          
          # Keep container alive and monitor daemon
          echo "D-Bus daemon monitoring started..."
          while kill -0 $DBUS_PID 2>/dev/null; do
            sleep 5
          done
          echo "D-Bus session daemon stopped"
      volumeMounts:
        - name: dbus-session-socket
          mountPath: /shared/dbus
      env:
        - name: DBUS_SESSION_BUS_ADDRESS
          value: "unix:path=/shared/dbus/session_bus_socket"
      resources:
        requests:
          memory: "32Mi"
          cpu: "50m"
        limits:
          memory: "64Mi"
          cpu: "100m"

    # Example Application Container - implements custom D-Bus service
    - name: dbus-service-provider
      image: localhost/isolated-dbus:latest  # Custom image with D-Bus pre-installed
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 1000
        runAsGroup: 1000
        capabilities:
          drop:
            - ALL
      command:
        - /bin/bash
        - -c
        - |
          echo "=== D-Bus Service Provider ==="
          echo "Using pre-installed D-Bus from Ubuntu image"
          
          # Create working directory and user environment
          mkdir -p /tmp/app && cd /tmp/app
          export HOME=/tmp/dbus-home
          
          # Wait for D-Bus session daemon
          echo "Waiting for isolated D-Bus session..."
          while [ ! -S /shared/dbus/session_bus_socket ]; do
            echo "  Checking for socket..."
            sleep 2
          done
          
          export DBUS_SESSION_BUS_ADDRESS="unix:path=/shared/dbus/session_bus_socket"
          echo "Connected to session bus: $DBUS_SESSION_BUS_ADDRESS"
          
          # Test D-Bus connectivity first
          echo "Testing D-Bus connectivity..."
          if dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames 2>/dev/null; then
            echo "D-Bus connection successful!"
          else
            echo "D-Bus connection failed, but continuing..."
          fi
          
          # Create and run D-Bus service simulation
          echo "=== Pod D-Bus Service Simulator ==="
          echo "This container demonstrates isolated D-Bus communication"
          echo "Service name: com.example.PodService (simulated)"
          echo "Available methods (simulated):"
          echo "  - GetTimestamp: Returns current Unix timestamp"  
          echo "  - Echo: Echoes back input with prefix"
          echo "  - AddNumbers: Adds two numbers"
          echo ""
          echo "In a real implementation, this would be a proper D-Bus service"
          echo "written in Go, Python, C, or other language with D-Bus bindings."
          echo ""
          echo "Current session bus services:"
          dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames 2>/dev/null || echo "Could not query D-Bus services"
          echo ""
          echo "Service simulation running..."
          
          # Keep service running with periodic heartbeat
          while true; do
            echo "$(date): Pod service heartbeat - timestamp=$(date +%s)"
            sleep 15
          done
      volumeMounts:
        - name: dbus-session-socket
          mountPath: /shared/dbus
      env:
        - name: DBUS_SESSION_BUS_ADDRESS
          value: "unix:path=/shared/dbus/session_bus_socket"
      resources:
        requests:
          memory: "128Mi"
          cpu: "100m"
        limits:
          memory: "256Mi"
          cpu: "200m"

    # D-Bus Controller/Client - connects to isolated session and demonstrates usage
    - name: dbus-controller-client  
      image: localhost/isolated-dbus:latest  # Custom image with D-Bus pre-installed
      securityContext:
        allowPrivilegeEscalation: false
        runAsUser: 1000
        runAsGroup: 1000
        capabilities:
          drop:
            - ALL
      command:
        - /bin/bash
        - -c
        - |
          echo "=== D-Bus Controller/Client ==="
          echo "Using pre-installed D-Bus from Ubuntu image"
          
          # Create user environment
          export HOME=/tmp/dbus-home
          mkdir -p /tmp/client && cd /tmp/client
          
          # Wait for D-Bus session daemon
          echo "Waiting for isolated D-Bus session..."
          while [ ! -S /shared/dbus/session_bus_socket ]; do
            echo "  Waiting for D-Bus socket..."
            sleep 2
          done
          
          export DBUS_SESSION_BUS_ADDRESS="unix:path=/shared/dbus/session_bus_socket"
          echo "Connected to session bus: $DBUS_SESSION_BUS_ADDRESS"
          
          # Wait a bit for other containers to start
          echo "Waiting for other containers to initialize..."
          sleep 5
          
          echo "=== Isolated Pod D-Bus Environment Ready ==="
          
          # Test D-Bus functionality
          echo "=== Testing Isolated D-Bus Session ==="
          
          echo "1. Listing available services in isolated session bus:"
          if dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.ListNames 2>/dev/null; then
            echo "   ✅ D-Bus service discovery successful!"
          else
            echo "   ❌ D-Bus service discovery failed"
          fi
          
          echo
          echo "2. Testing D-Bus introspection:"
          if dbus-send --session --print-reply --dest=org.freedesktop.DBus /org/freedesktop/DBus org.freedesktop.DBus.Introspectable.Introspect 2>/dev/null >/dev/null; then
            echo "   ✅ D-Bus introspection working!"
          else
            echo "   ❌ D-Bus introspection failed"
          fi
          
          echo
          echo "3. Pod D-Bus Environment Status:"
          echo "   • Bus Type: Isolated Session Bus (pod-scoped)"
          echo "   • Security: Non-root containers, no host access"
          echo "   • Communication: Unix socket via shared volume"
          echo "   • Socket Location: /shared/dbus/session_bus_socket"
          
          echo
          echo "=== Pod D-Bus Environment is fully functional ==="
          echo "This demonstrates:"
          echo "• Complete isolation from host D-Bus"
          echo "• Secure inter-container communication"
          echo "• Pod-scoped D-Bus session"
          echo "• Non-privileged containers"
          
          # Keep container running with health checks
          echo
          echo "Client monitoring started. Press Ctrl+C to stop."
          while true; do
            sleep 30
            if [ -S /shared/dbus/session_bus_socket ]; then
              echo "$(date): ✅ Pod D-Bus environment healthy"
            else
              echo "$(date): ❌ Pod D-Bus socket missing"
            fi
          done
      volumeMounts:
        - name: dbus-session-socket
          mountPath: /shared/dbus
      env:
        - name: DBUS_SESSION_BUS_ADDRESS
          value: "unix:path=/shared/dbus/session_bus_socket"
      resources:
        requests:
          memory: "64Mi"
          cpu: "50m"
        limits:
          memory: "128Mi"
          cpu: "100m"

  restartPolicy: Always
---
# Optional: ConfigMap for custom D-Bus session configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: dbus-session-config
data:
  session-local.conf: |
    <!-- Custom isolated session bus configuration -->
    <busconfig>
      <type>session</type>
      <keep_umask/>
      <listen>unix:path=/shared/dbus/session_bus_socket</listen>
      
      <policy context="default">
        <!-- Allow everything for pods in same namespace -->
        <allow send_destination="*" eavesdrop="true"/>
        <allow receive_sender="*" eavesdrop="true"/>
        <allow own="*"/>
        <allow user="*"/>
      </policy>
    </busconfig>
